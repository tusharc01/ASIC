
// Generated by Cadence Genus(TM) Synthesis Solution 20.11-s111_1
// Generated on: Apr  1 2025 17:44:22 IST (Apr  1 2025 12:14:22 UTC)

// Verification Directory fv/lock 

module lock(clock, reset, x, ready, unlock, error);
  input clock, reset, x;
  output ready, unlock, error;
  wire clock, reset, x;
  wire ready, unlock, error;
  wire [2:0] state;
  wire n_229, n_233, n_236, n_237, n_239, n_244, n_247, n_252;
  wire n_255, n_262, n_263, n_264, n_273, n_274, n_275, n_276;
  wire n_283, n_284, n_285, n_296, n_297, n_298, n_299, n_300;
  wire n_307, n_308, n_309, n_312, n_315;
  or g3 (n_229, state[0], state[2]);
  or g127 (n_233, wc, state[1]);
  not gc (wc, state[2]);
  or g197 (n_237, n_236, wc0);
  not gc0 (wc0, n_312);
  or g198 (error, n_299, wc1);
  not gc1 (wc1, n_300);
  nand g199 (n_312, n_252, x);
  or g200 (n_247, n_309, n_236);
  or g201 (n_244, n_284, wc2);
  not gc2 (wc2, n_285);
  nand g202 (n_299, n_297, n_298);
  nand g203 (ready, n_275, n_276);
  or g204 (n_252, wc3, n_264);
  not gc3 (wc3, n_263);
  or g205 (n_275, n_273, x);
  nand g206 (n_236, n_297, n_315);
  or g207 (n_298, n_296, wc4);
  not gc4 (wc4, x);
  nand g208 (n_284, n_233, n_283);
  nand g211 (n_264, state[2], n_262);
  or g212 (n_273, state[1], n_229);
  nand g213 (n_309, n_307, n_308);
  nand g214 (n_296, state[0], n_233);
  nand g215 (n_283, n_229, x);
  or g216 (n_297, n_233, x);
  or g217 (n_315, wc5, n_229);
  not gc5 (wc5, state[1]);
  or g218 (n_276, n_274, n_239);
  or g219 (n_285, state[2], n_239);
  or g220 (n_300, n_229, n_239);
  nand g221 (n_274, state[2], state[0]);
  nand g222 (n_308, state[1], x);
  nand g223 (n_263, state[0], state[1]);
  or g224 (n_262, state[0], state[1]);
  or g225 (n_307, wc6, state[1]);
  not gc6 (wc6, state[0]);
  or g226 (n_255, state[0], wc7);
  not gc7 (wc7, state[2]);
  or g227 (n_239, wc8, x);
  not gc8 (wc8, state[1]);
  and g228 (unlock, wc9, state[1]);
  not gc9 (wc9, n_255);
  CDN_flop \state_reg[0] (.clk (clock), .d (n_237), .sena (1'b1), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (state[0]));
  CDN_flop \state_reg[1] (.clk (clock), .d (n_247), .sena (1'b1), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (state[1]));
  CDN_flop \state_reg[2] (.clk (clock), .d (n_244), .sena (1'b1), .aclr
       (reset), .apre (1'b0), .srl (1'b0), .srd (1'b0), .q (state[2]));
endmodule

`ifdef RC_CDN_GENERIC_GATE
`else
module CDN_flop(clk, d, sena, aclr, apre, srl, srd, q);
  input clk, d, sena, aclr, apre, srl, srd;
  output q;
  wire clk, d, sena, aclr, apre, srl, srd;
  wire q;
  reg  qi;
  assign #1 q = qi;
  always 
    @(posedge clk or posedge apre or posedge aclr) 
      if (aclr) 
        qi <= 0;
      else if (apre) 
          qi <= 1;
        else if (srl) 
            qi <= srd;
          else begin
            if (sena) 
              qi <= d;
          end
  initial 
    qi <= 1'b0;
endmodule
`endif
